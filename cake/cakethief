#!/usr/bin/env python
import time, random

#cakes_tuples = [(5,120),(5,34),(9,27),(12,300),(20,568),(2,7),(8,17)]
cakes_tuples = [(7, 160), (3, 90), (2, 15)]
#cakes_tuples = [(random.randint(6,12),random.randint(1,50)) for a in range(1000)] 
#print(cakes_tuples)

capacity = 22 

##Â Simple and fast Solution, inaccurate
def max_straightforward(cakes_tuples, capacity):
    begin = time.time()
    
    # rates = {rate:weight, ...}
    rates = {}
    for cake in cakes_tuples:
        rates[cake[1]//cake[0]] = cake[0]
    
    sorted_rates = []
    for k,v in rates.items():
        sorted_rates.append(k)
    # tim sort
    sorted_rates.sort()
    
    remain = 0
    result = []
    N = len(sorted_rates)
    
    # current item weight
    w = rates[sorted_rates[N-1]]
    # current item rate
    r = sorted_rates[N-1]
    # total value
    v = (capacity // w) * (r*w)
    # how many items we pick
    c = (capacity // w) 
    # total weight
    tw = c * w
    remain = capacity % w
    result = [v,[v,w,tw,c,r]]
    print(remain) 
    if remain > 0:
        for j in range(len(sorted_rates)-2,-1,-1):
            w = rates[sorted_rates[j]]
            if w <= remain:
                # current item rate
                r = sorted_rates[j]
                # total value
                v = (remain // w) * (r*w)
                # how many items we pick
                c = (remain // w) 
                # total weight
                tw = c * w
                result.append([v,w,tw,c,r])
                result[0] += v
                print(result,remain)
                remain -= w
    end = time.time()
    print(end-begin)
    print()
    print("Total value {}".format(result[0]))
    for i in range(1,len(result)):
        print("Cake total value {}, Cake weight {}, Total weight {}, Count {}, Rate {} ".format(result[i][0],result[i][1],result[i][2],result[i][3],result[i][4]))

## most accurate solution but slowest 
def max_inefficient(cake_tuples, weight_capacity):
  # We make a list to hold the maximum possible value at every
  # duffel bag weight capacity from 0 to weight_capacity
  # starting each index with value 0
  begin = time.time()
  max_values_at_capacities = [0] * (weight_capacity + 1)

  for current_capacity in range(weight_capacity + 1):
      # Set a variable to hold the max monetary value so far
      # for current_capacity
      current_max_value = 0

      for cake_weight, cake_value in cake_tuples:
          # If a cake weighs 0 and has a positive value the value of
          # our duffel bag is infinite!
          if cake_weight == 0 and cake_value != 0:
              return float('inf')

          # If the current cake weighs as much or less than the
          # current weight capacity it's possible taking the cake
          # would get a better value
          if cake_weight <= current_capacity:

              # So we check: should we use the cake or not?
              # If we use the cake, the most kilograms we can include in
              # addition to the cake we're adding is the current capacity
              # minus the cake's weight. We find the max value at that
              # integer capacity in our list max_values_at_capacities
              max_value_using_cake = (
                  cake_value
                  + max_values_at_capacities[current_capacity - cake_weight]
              )
              print(current_capacity)
              print(max_values_at_capacities)
              print(cake_weight, cake_value)
              print(max_value_using_cake)
              print()
              # Now we see if it's worth taking the cake. how does the
              # value with the cake compare to the current_max_value?
              current_max_value = max(max_value_using_cake,
                                      current_max_value)

      # Add each capacity's max value to our list so we can use them
      # when calculating all the remaining capacities
      max_values_at_capacities[current_capacity] = current_max_value
  end = time.time()
  print(end-begin)
  print()
  print(max_values_at_capacities[weight_capacity])


# Write an accurate and efficient algorithm
# divide and conquer





if __name__=='__main__':
    max_straightforward(cakes_tuples, capacity)
    max_inefficient(cakes_tuples, capacity)
